import React, { useState, useEffect, useRef } from 'react';
import ReactPlayer from 'react-player'; // React ‡§ï‡§æ Media Player Component
import localforage from 'localforage';  // Data ‡§ï‡•ã Local Storage ‡§Æ‡•á‡§Ç Store ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

const MediaPlayer = ({ qid }) => {
  console.log('qid', qid); // Debugging ‡§ï‡•á ‡§≤‡§ø‡§è qid ‡§ï‡•Ä value check ‡§ï‡§∞‡•á‡§Ç
  const [mediaFiles, setMediaFiles] = useState([]); // Media Files ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è State
  const [localMediaLink, setLocalMediaLink] = useState(null); // ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à Media File ‡§ï‡§æ URL ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç
  const [isPlaying, setIsPlaying] = useState(false); // Media ‡§ï‡•á Play/Pause ‡§ï‡•ã Track ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal ‡§ï‡§æ Open/Close Status
  const [isFileInputVisible, setIsFileInputVisible] = useState(true); // Input Box ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
  const playerRef = useRef(null); // Player ‡§ï‡•ã ‡§∞‡•á‡§´‡§∞‡•á‡§Ç‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

  // üîÑ Component Load ‡§π‡•ã‡§§‡•á ‡§π‡•Ä LocalForage ‡§∏‡•á Files ‡§ï‡•ã Load ‡§ï‡§∞‡•á‡§Ç
  useEffect(() => {
    const loadFiles = async () => {
      const storedFiles = await localforage.getItem('mediaFiles'); // LocalForage ‡§∏‡•á Files ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
      if (storedFiles) {
        setMediaFiles(storedFiles); // Files ‡§ï‡•ã State ‡§Æ‡•á‡§Ç Set ‡§ï‡§∞‡•á‡§Ç
        setIsFileInputVisible(false); // Files ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§™‡§∞ Input Box ‡§õ‡•Å‡§™‡§æ ‡§¶‡•á‡§Ç
      }
    };
    loadFiles(); // Function ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
  }, []);

  // üìÇ File Input Handle ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Function
  const handleFileInput = async (event) => {
    const files = Array.from(event.target.files); // ‡§∏‡§≠‡•Ä ‡§ö‡•Å‡§®‡•Ä ‡§π‡•Å‡§à Files ‡§ï‡•ã Array ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
    const mediaArray = files.map((file) => ({
      name: file.name, // File ‡§ï‡§æ ‡§®‡§æ‡§Æ
      url: URL.createObjectURL(file), // File ‡§ï‡§æ Temporary URL ‡§¨‡§®‡§æ‡§è‡§Å
    }));
    setMediaFiles(mediaArray); // Files ‡§ï‡•ã State ‡§Æ‡•á‡§Ç Set ‡§ï‡§∞‡•á‡§Ç
    await localforage.setItem('mediaFiles', mediaArray); // Files ‡§ï‡•ã LocalForage ‡§Æ‡•á‡§Ç Save ‡§ï‡§∞‡•á‡§Ç
    setIsFileInputVisible(false); // Input Box ‡§ï‡•ã ‡§õ‡•Å‡§™‡§æ ‡§¶‡•á‡§Ç
  };

  // ‚ñ∂Ô∏è Media Play ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Function
  const playMedia = (url) => {
    setLocalMediaLink(url); // ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à File ‡§ï‡§æ URL Set ‡§ï‡§∞‡•á‡§Ç
    setIsModalOpen(true); // Modal Open ‡§ï‡§∞‡•á‡§Ç
    setIsPlaying(true); // Media ‡§ï‡•ã Play ‡§ï‡§∞‡•á‡§Ç
  };

  // ‚ùå Modal ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è Function
  const handleCloseModal = () => {
    setIsModalOpen(false); // Modal ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
    setIsPlaying(false); // Media ‡§ï‡•ã Pause ‡§ï‡§∞‡•á‡§Ç
    setLocalMediaLink(null); // Local URL Reset ‡§ï‡§∞‡•á‡§Ç
  };

  return (
    <div className="mt-4">
      {/* üì• File Input (‡§ï‡•á‡§µ‡§≤ ‡§™‡§π‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ) */}
      {/* (
        <input
          type="file"
          accept="video/mp4, audio/*" // ‡§ï‡•á‡§µ‡§≤ Videos ‡§î‡§∞ Audio Files ‡§π‡•Ä Allow ‡§ï‡§∞‡•á‡§Ç
          multiple
          onChange={handleFileInput} // File Change ‡§π‡•ã‡§®‡•á ‡§™‡§∞ Handle ‡§ï‡§∞‡•á‡§Ç
          className="mb-4"
        />
      )*/}

      {/* üü¢ ‡§ö‡•Å‡§®‡•Ä ‡§ó‡§à Files ‡§ï‡•á ‡§≤‡§ø‡§è Buttons */}
      <div className="grid grid-cols-2 gap-4 mb-4">
      {mediaFiles
  .filter((file) => new RegExp(`\\b${qid}\\b`).test(file.name)) // Match exact qid
  .map((file, index) => (
    <button
      key={index}
      onClick={() => playMedia(file.url)} // Play the filtered media
      className="bg-green-500 text-white px-4 py-2 rounded-lg"
    >
      {file.name} {/* Display the file name */}
    </button>
  ))}

      </div>

      {/* üì∫ Modal (Media Player) */}
      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="relative bg-white p-6 rounded-lg shadow-lg w-11/12 max-w-xl">
            {/* ‚úñÔ∏è Close Button */}
            <button
              onClick={handleCloseModal} // Modal ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
              className="absolute top-4 right-4 text-gray-500 hover:text-black text-2xl"
            >
              ‚úï
            </button>

            {/* üìπ ReactPlayer ‡§∏‡•á Media Play ‡§ï‡§∞‡•á‡§Ç */}
            {localMediaLink ? (
              <ReactPlayer
                ref={playerRef} // Player ‡§ï‡§æ Ref Set ‡§ï‡§∞‡•á‡§Ç
                url={localMediaLink} // URL ‡§∏‡•á Media Play ‡§ï‡§∞‡•á‡§Ç
                playing={isPlaying} // Play/Pause Status
                controls // Player Controls ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
                width="100%" // Width ‡§ï‡•ã Adjust ‡§ï‡§∞‡•á‡§Ç
                height="auto" // Height Auto ‡§∞‡§ñ‡•á‡§Ç
              />
            ) : (
              <p className="text-gray-500">No media selected or invalid link.</p> // ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à File ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
            )}

            {/* Play/Pause ‡§î‡§∞ Close Buttons */}
            <div className="flex justify-end mt-4">
              <button
                onClick={() => setIsPlaying(!isPlaying)} // Play/Pause Toggle ‡§ï‡§∞‡•á‡§Ç
                className="mr-4 bg-blue-500 text-white px-4 py-2 rounded-lg"
              >
                {isPlaying ? 'Pause' : 'Play'} {/* Play/Pause Label */}
              </button>

              <button
                onClick={handleCloseModal} // Modal ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
                className="bg-red-500 text-white px-4 py-2 rounded-lg"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MediaPlayer;
